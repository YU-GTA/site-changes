const VERSION="1.1.0";const BASE_URL="https://yugta.ca";const MAPBOX_STYLE_URL="mapbox://styles/yugta/cklr089ge01d617pk1r3ve3gu";const MAPBOX_STYLE_URL_V2="mapbox://styles/yugta/ckmm01zve0u5v17nrbb15c8v0";const MAPBOX_ACCESS_TOKEN="pk.eyJ1IjoieXVndGEiLCJhIjoiY2trMnJqcm0xMGRwZzJxbnVxN2ViNXE5MiJ9.EGJpk3Lx5gcU4PFonjNqWQ";const INITIATIVES=[{id:"community_outreach",name:"Community Outreach"},{id:"critical_care",name:"Critical Care"},{id:"innovative_centres",name:"Innovative Centres"},{id:"leadership_development",name:"Leadership Development"},{id:"marketplace",name:"Marketplace"},{id:"trips_camps_events",name:"Trips, Camps, and Events"}];var map,catchments,teams,gta,areas;const init=async()=>{await Promise.all([d3.csv("./data/catchments.csv"),d3.csv("./data/teams.csv"),d3.json("./data/gta.json"),d3.json("./data/areas.json")]).then(([catchments_json,teams_json,gta_json,areas_json])=>{catchments=catchments_json;teams=teams_json;gta=gta_json;areas=areas_json;areas.features.forEach((d,idx)=>d.id=idx);catchments.forEach(d=>{let f=areas.features.find(f=>f.properties.catchment==d.id);if(!f){console.log("feature not found : "+d.id)}else{f.properties=Object.assign(f.properties,d);f.properties.opacity=+f.properties.opacity;f.properties.aggregation_level=+f.properties.aggregation_level;f.properties.critical_care=+f.properties.critical_care;f.properties.community_outreach=+f.properties.community_outreach;f.properties.innovative_centres=+f.properties.innovative_centres;f.properties.leadership_development=+f.properties.leadership_development;f.properties.marketplace=+f.properties.marketplace;f.properties.trips_camps_events=+f.properties.trips_camps_events}});map=map_init();setTimeout(()=>filter_init(),1e3)})};const should_show_feature=f=>{let res=false;let props=f.properties;let feature_initiatives=INITIATIVES.filter(d=>props[d]>0);let shown_initiatives=filter.filter(d=>d.on).map(d=>d.initiative);let intersection=feature_initiatives.filter(d=>shown_initiatives.includes(d));return intersection.length>0};const map_init=()=>{mapboxgl.accessToken=MAPBOX_ACCESS_TOKEN;var map=new mapboxgl.Map({container:"map",style:MAPBOX_STYLE_URL_V2,center:[-79.319,43.813],zoom:9.902,pitch:56.014,bearing:-18.22});map.scrollZoom.disable();if(/Android|webOS|iPhone|iPad|iPod|BlackBerry/i.test(navigator.userAgent)){map.dragPan.disable();map.touchPitch.disable();map.on("touchstart",function(e){var oe=e.originalEvent;if(oe&&"touches"in oe){if(oe.touches.length>1){oe.stopImmediatePropagation();map.dragPan.enable()}else{map.dragPan.disable()}}})}map.on("load",function(){var layers=map.getStyle().layers;var firstSymbolId;for(var i=0;i<layers.length;i++){if(layers[i].id.search("label")!=-1){firstSymbolId=layers[i].id;console.log(firstSymbolId);break}}map.addSource("gta_data",{type:"geojson",data:gta});map.addSource("areas_data",{type:"geojson",data:areas,promoteId:"id"});map.addLayer({id:"areas",type:"fill",source:"areas_data",layout:{},paint:{"fill-color":["get","fill"],"fill-outline-color":["get","outline"],"fill-opacity":["case",["boolean",["feature-state","visible"],true],1,0]}},"road-label");map.addLayer({id:"gta_outline",type:"line",source:"gta_data",layout:{"line-miter-limit":.5},paint:{"line-color":"#04aeff","line-opacity":1,"line-width":["interpolate",["linear"],["zoom"],5,5,15,20]}},"areas");map.on("click",click);map.on("mouseenter","areas",function(){map.getCanvas().style.cursor="pointer"});map.on("mouseleave","areas",function(){map.getCanvas().style.cursor=""});map.on("move",function(e){})});function click(e){if(filter_options_visible())close_filter_options();let p=e.point;let fs=map.queryRenderedFeatures(p).filter(f=>f.properties.catchment!==undefined).filter(f=>{let state=map.getFeatureState(f);return state.visible});if(fs.length===0){d3.select("#popup").classed("hidden",true);return}fs.forEach(d=>console.log(d.properties.id));console.log("====");let top=fs[0];let props=top.properties;props=Object.assign({critical_care:0,community_outreach:0,innovative_centres:0,leadership_development:0,marketplace:0,trips_camps_events:0},props);let agg_level=props.aggregation_level;let peers=fs.filter((f,i)=>i>0&&f.properties.aggregation_level==agg_level);console.log(peers.length);peers.forEach(p=>{["critical_care","community_outreach","innovative_centres","leadership_development","marketplace","trips_camps_events"].forEach(factor=>props[factor]+=p.properties[factor])});let div=d3.select("#popup").datum(props).call(renderPopup).classed("hidden",false)}function renderPopup(sel){if(!sel.select(".info").empty())sel.select(".catchment").remove();let d=sel.datum();let critical=d.critical_care?`<p>• Critical Care: ${d.critical_care}</p>`:"";let community=d.community_outreach?`<p>• Community Outreach: ${d.community_outreach}</p>`:"";let innovation=d.innovative_centres?`<p>• Innovative Centres: ${d.innovative_centres}</p>`:"";let leadership=d.leadership_development?`<p>• Leadership Development: ${d.leadership_development}</p>`:"";let marketplace=d.marketplace?`<p>• Marketplace: ${d.marketplace}</p>`:"";let trips=d.trips_camps_events?`<p>• Trips, Camps and Events: ${d.trips_camps_events}</p>`:"";let teams=d.team_ids.split(",").map(renderTeamLink).join(", ");sel.html(`\n        <div class="info" style="background-color:${d.fill};">\n          <div id="close">close</div>\n          <h2>${d.catchment}</h2>\n          <h3>Active Initiatives</h3>\n          ${critical}\n          ${community}\n          ${innovation}\n          ${leadership}\n          ${marketplace}\n          ${trips}\n          <h3>Active Teams</h3>\n          ${teams}\n        </div>\n      `).select("#close").on("click",closePopup)}function renderTeamLink(tid){let t=teams.find(d=>d.id==tid);return`<a target="_PARENT" href="${BASE_URL}${t.url}">${t.name}</a>`}function closePopup(){d3.select("#popup").classed("hidden",true)}map.scrollZoom.disable();map.addControl(new mapboxgl.NavigationControl);return map};function filter_init(){show_all();render_filter_panel()}function render_filter_panel(){let sel=d3.select("#filter");let id=sel.attr("data-initiative-id");let name=id!=""?get_initiative_name(id):"all initiatives";sel.html(`\n    <div class="bg-near-white pa3">\n      <p class="label mb1 ml0">Showing</p>\n      <p class="title mb2 ml0 b">${name}</p>\n      <div class="button db">filter initiatives</div>\n    </div>\n  `);sel.select(".button").on("click",render_filter_options);sel.classed("hidden",false)}function render_filter_options(){let sel=d3.select("#filter");let id=sel.attr("data-initiative");sel.html(`\n    <div class="bg-near-white pa3">\n      <p class="title b mb4 ml1">apply filter</p>\n      <div class="close">close</div>\n\n      <p class="label mb2 ml1">select an initiative</p>\n      <div class="options mb4"></div>\n\n      <p class="hidden label mb2 ml1">or</p>\n      <div id="all" class="button db">show all initiatives</div>\n    </div>\n  `);sel.select(".close").on("click",close_filter_options);sel.select(".options").selectAll(".option").data(INITIATIVES,d=>d.id).enter().append("p").attr("class","initiative").text(d=>d.name).on("click",show_one);sel.select(".button#all").on("click",show_all)}function close_filter_options(){render_filter_panel()}function show_all(){let sel=d3.select("#filter");sel.attr("data-initiative-id","");apply_filter(null);render_filter_panel()}function show_one(d){let sel=d3.select("#filter");sel.attr("data-initiative-id",d.id);apply_filter(d.id);render_filter_panel()}function get_initiative_name(id){return INITIATIVES.find(d=>d.id==id).name}function apply_filter(initiative_id){map.querySourceFeatures("areas_data",{sourceLayer:"areas"}).filter(f=>f.properties.catchment!==undefined).forEach(f=>{if(initiative_id){let props=f.properties;let initiatives=INITIATIVES.map(d=>d.id).filter(d=>props[initiative_id]>0);let is_visible=initiatives.length>0;console.log(f,is_visible);map.setFeatureState({source:"areas_data",id:f.properties.id},{visible:is_visible})}else{map.setFeatureState({source:"areas_data",id:f.properties.id},{visible:true})}})}function filter_options_visible(){let sel=d3.select("#filter").select(".options");return!sel.empty()&&!sel.classed("hidden")}setTimeout(init,500);
